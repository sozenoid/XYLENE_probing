#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 24 10:51:04 2019

@author: macenrola
"""
def make_xyz_from_dok(dokfile, targetfile):
	"""
	Parameters
	----------
	dokfile : string
		the dok file in question
	targetfile : string
		the xyz file with the docking target
	Returns
	-------
	two xyz files, one for the cap and one for the capped complex
	"""
	def extract_xyz_from_dok(dokfile):
		"""
		Parameters
		----------
		dokfile : string
			the path of the dok file

		Returns
		-------
		a list of atoms and coordinates
		"""
		with open(dokfile, "r") as r:
			lines = [x.strip() for x in r.readlines()]
			iend = lines.index("END")
			return [(x[2], x[5], x[6], x[7]) for x in [y.split() for y in lines[2:iend]]]
	def extract_xyz_from_target(targetfile):
		"""
		Parameters
		----------
		targetfile : string
		
		Returns
		-------
		returns the atoms and coordinates of the targetfile.

		"""
		with open(targetfile, "r") as r:
			lines = [x.strip() for x in r.readlines()]
			return [(x[0], x[1], x[2], x[3]) for x in [y.split() for y in lines[2:]]]
	xyz_cap = dokfile[:-4]+"-cap.xyz"
	xyz_complex = dokfile[:-4]+"-complex.xyz"
	xyz_cap_coords = extract_xyz_from_dok(dokfile)
	xyz_target = extract_xyz_from_target(targetfile)
	with open(xyz_cap, "w") as w:
		w.write("{}\n".format(len(xyz_cap_coords)))
		w.write("{}\n".format(dokfile.split("/")[-1]))
		for el in xyz_cap_coords:
			w.write("{0:>2}    {1:>12}    {2:>12}    {3:>12}\n".format(*el))
	with open(xyz_complex, "w") as w:
		w.write("{}-cap\n".format(len(xyz_cap_coords)+len(xyz_target)))
		w.write("{}-capped\n".format(dokfile.split("/")[-1]))
		for el in xyz_cap_coords:
			w.write("{0:>2}    {1:>12}    {2:>12}    {3:>12}\n".format(*el))
		for el in xyz_target:
			w.write("{0:>2}    {1:>12}    {2:>12}    {3:>12}\n".format(*el))
	
def make_charge_dic(BACKUPFILE):
	"""
	Parameters
	----------
	BACKUPFILE : a summary file generated by the MCTS procedure 
		DESCRIPTION.
	Returns
	-------
	a dictionary of charges by name
	"""
	charge_dic = {}
	with open(BACKUPFILE, "r") as r:
		for line in r:
			try:
				parts = line.split()
				name = parts[0]
				smi = parts[1]
				mol = Chem.MolFromSmiles(smi)
				charge_dic[name] = Chem.GetFormalCharge(mol)
			except:
				pass
	with open(BACKUPFILE+"-DIC", 'w') as w:
		pickle.dump(charge_dic, w)

# =============================================================================
# 	with open(BACKUPFILE+"-DIC", 'r') as r:
# 		print pickle.load(r)
# =============================================================================
		
def format_gaussian_input_from_xyz(xyz_file, charge=1):
	"""
	PRE: Takes in a valid xyz file generated by openbabel or a gaussian output file
	POST: will produce a gaussian input file
	"""
	name=xyz_file.split("/")[-1]
# =============================================================================
# 	route="#N wB97XD/6-31G* opt=(ts, noeigentest, calcfc, modredundant, maxcyc=999) freq"
# =============================================================================
	route="#n PM6D3 Opt Freq=(HPModes)"
	freeze=" D       2       3       9      10 F"
	checkpoint="%Chk={}.chk".format(name)
	mem="%mem=20gb"
	procs="%NProcShared=4"

# =============================================================================
# 	Fine tuning the charge and multiplicity
# =============================================================================
	if 'diradical' in name or 'N2' in name:
		charge_mult="1 3"
		print "{} is diradical or n2".format(name)
	else:
		charge_mult = "1 1"
	charge_mult = "{} 1".format(charge)
		
		
# =============================================================================
# 	Fine tuning the route section
# =============================================================================
	if 'TS' in name:
		route="#n PM6D3 opt=(ts, noeigentest, modredundant, calcfc, recalcfc=5, maxcyc=999) maxdisk=100GB freq"
	else:
		route="#n PM6D3 opt=(maxstep=999, maxcyc=999) SCRF=CPCM maxdisk=100GB freq"
		
	route="#n PM6D3 maxdisk=100GB Opt=(TS, maxcycles=999, ModRedundant, noeigentest, calcfc) freq"
	if name[-4:]==".xyz":
		with open(xyz_file, 'rb') as r:
			coords = r.readlines()[2:]
	elif name[-4:]==".out":
		coords = extract_xyz_from_gaussian_out(xyz_file)

	with open(xyz_file+".com", "wb") as w:
		w.write(procs+"\n")
		w.write(checkpoint+"\n")
		w.write(mem+"\n")
		w.write(route+"\n\n")
		w.write(name+"\n\n")
		w.write(charge_mult+"\n")
		w.writelines(coords)
		w.write("\n")
		# w.write("notatoms=1-{}\n".format(len(coords)-126))
		#w.write(freeze+"\n")
		w.write("\n")


def extract_xyz_from_gaussian_out(outfile):
	"""
	PRE  : Takes in a valid Gaussian File 
	POST : Returns the last xyz coordinates
	"""
	atom_dic={'1':'H', '6':'C', '7':'N', '8':'O'}
	with open(outfile, "rb") as r:
		lines = r.readlines()
	
	last_rot = -1
	for i, line in enumerate(lines):
		if "Rotational constants" in line:
			last_rot=i
	
	last_atom=-1
	for i, line in enumerate(lines):
		if "Coordinates (Angstroms)" in line:
			last_atom=i
			
	if last_rot==-1 or last_atom==-1:
		print "FILE INCOMPLETE"
		return None
	
	return ["{0}    {1:+2.8f}    {2:+2.8f}    {3:+2.8f}\n".format(atom_dic[x.strip().split()[1]], *[float(y) for y in x.strip().split()[-3:]]) for x in lines[last_atom+3: last_rot-1]]
	
if __name__ == "__main__":
	import sys, glob, pickle
	import rdkit
	from rdkit import Chem
# =============================================================================
# 	make_charge_dic("/home/macenrola/Documents/ML/ChemTS/ledock_ligand_design_with_sa_scorer_adaincl_good_save/RES/MCTS_WITH_COVERAGE/SORTED_BACK")
# =============================================================================
# =============================================================================
# 	for doks in glob.glob("/home/macenrola/Documents/ML/ChemTS/ledock_ligand_design_with_sa_scorer_adaincl_good_save/RES/MCTS_WITH_COVERAGE/*dok"):
# 		make_xyz_from_dok(doks,
# 				   "/home/macenrola/Documents/ML/ChemTS/ledock_ligand_design_with_sa_scorer_adaincl_good_save/adamantanone-docked-named-c.xyz")
# =============================================================================
	with open("/home/macenrola/Documents/ML/ChemTS/ledock_ligand_design_with_sa_scorer_adaincl_good_save/RES/MCTS_WITH_COVERAGE/SORTED_BACK"+"-DIC", 'r') as r:
		cdic = pickle.load(r)
	if len(sys.argv)==1:
		print """
		Please provide input files
		You need to run the following lines before having the command to work
			echo "alias gengauss='python `pwd`/generate_gaussian_input_files.py'" >> ~/.bashrc
			source ~/.bashrc
		Then you can use the script in any directory using:
			gengauss *xyz
		and edit the script by going to the generate_gaussian_input_files.py file and doing
			nano generate_gaussian_input_files.py
		
		"""
		
	if len(sys.argv)==2:
		name = sys.argv[1].split("/")[-1].split("-")[0]
		try:
			print name, cdic[name]
			format_gaussian_input_from_xyz(sys.argv[1], cdic[name])
		except:
			format_gaussian_input_from_xyz(sys.argv[1])
		
	if len(sys.argv)>2:
		for f in sys.argv[1:]:
			try:
				name = f.split("/")[-1].split("-")[0]
				print name, cdic[name]
				format_gaussian_input_from_xyz(f, cdic[name])
			except:
				format_gaussian_input_from_xyz(f)

